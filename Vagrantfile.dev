# -*- mode: ruby -*-
# vi: set ft=ruby :

# Some global settings for devstack local.conf

# Set build type and version
BUILD_TYPE="COMPLETE" # Set build type to "BASE", "STAGED" or "COMPLETE" based on your build need
BUILD_VERSION="STABLE" # Set build version to "STABLE" or "DEV" to enable or disable experimental features

# Set installation settings
STACK_HOME="/home/vagrant" # DevStack home directory
INSTALL_DIR="/opt/stack" # DevStack installation location
INSTANCES_PATH="#{INSTALL_DIR}/instances" # Guest instances location
LOG_DIR="/opt/stack/logs" # DevStack log location
STACK_LOG="#{LOG_DIR}/stack.sh.log" # Stack.sh log file

# Set OS config
OS_HOSTNAME="DEVSTACK-#{BUILD_VERSION}-#{BUILD_TYPE}" # Hostname for the OS, defaults to devstack + build version + build type
NIC3_PROMISCUOUS="true" # Leave true for Neutron flat / bridged configurations

# Host OS image config
VB_IMAGE_SOURCE="HASHI" # Set to either "HASHI" to use the default Hashicorp syntax, "ubuntu/trusty64", or "URL" to use url syntax, http://cloud-images.ubuntu.com/vagrant/trusty...
VB_IMAGE_NAME="ubuntu/trusty64" # The latest VirtualBox image of Trusty server 64 bit from Ubuntu
VB_IMAGE_URL="https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box" # Populate if you are pulling your own image

# Set network config
VAGRANT_NETWORK="10.0.2" # Vagrant (NAT / default gateway) network
MANAGEMENT_NETWORK="192.168.34" # Management network
PUBLIC_NETWORK="192.168.28" # Neutron gateway / provider network
PRIVATE_NETWORK="10.0.0" # Private network CIDR
DEFAULT_MASK="255.255.255.0" # Defualt /24 network mask unless specified otherwise
DNS="10.0.2.3" # Default DNS server for your subnets, e.g. local VirtualBox forwarder

# HTTP Proxy config
HTTP_PROXY_ENABLE="false" # HTTP proxy server on (true) or off (false)
HTTP_PROXY_HOST="http://#{VAGRANT_NETWORK}.2" # Proxy host if enabled
HTTP_PROXY_PORT="8888" # Proxy port if proxy host is enabled

# HTTPS Proxy config
HTTPS_PROXY_ENABLE="false" # HTTPS proxy server on (true) or off (false)
HTTPS_PROXY_HOST="http://#{VAGRANT_NETWORK}.2" # Proxy host if enabled
HTTPS_PROXY_PORT="8888" # Proxy port if proxy host is enabled

# SSL Keys
SSL_KEY="/usr/share/ca-certificates/charles.key" # SSL key for HTTPS proxy
SSL_CRT="/usr/share/ca-certificates/charles.crt" # SSL cert for HTTPS proxy
SSL_PEM="/usr/share/ca-certificates/charles.pem" # SSL pem for HTTPS proxy

# Set DevStack base config
HOST_IP="#{MANAGEMENT_NETWORK}.2" # Management IP, ssh to the OS, OpenStack APIs, etc.
DEVSTACK_BRANCH="master" # Devstack branch to synch to, defaults to "master"
DEVSTACK_PASSWORD="stack" # Password for all devstack services and logins

# Set OpenStack image / flavor config
DEFAULT_NOVA_IMAGE="cirros-0.3.4-x86_64-uec" # Used for all instance builds unless specified otherwise
DEFAULT_NOVA_FLAVOR_NAME="m1.micro" # Default is 1, m1.tiny, set to custom flavor - 1 vcpu x 64 mb ram x 1 gb disk
DEFAULT_NOVA_FLAVOR_ID="6" # Default is 1, m1.tiny, currently set to a custom flavor built during install, 6

# Set OpenStack neutron config, get OpenStack neutron guids
FLAT_NEUTRON_INTERFACE="eth2" # Interface that Neutron bridges to, don't change this unless you understand the impact
PUBLIC_NEUTRON_INTERFACE="eth2" # Interface that Neutron routes and nats through, don't change this unless you understand the impact
OVS_EXTERNAL_BRIDGE="br-ex" # Neutron external bridge
OVS_INTERNAL_BRIDGE="br-int" # Neutron external bridge
OVS_TUNNEL_BRIDGE="br-tun" # Neutron external bridge
PUBLIC_NETWORK_NAME="public" # What to name the public network
PUBLIC_SUBNET_NAME="public-subnet" # Give the public subnet a name, defaults to "public-subnet"
PRIVATE_NETWORK_NAME="private" # What to name the public network
PRIVATE_SUBNET_NAME="private-subnet" # Give the public subnet a name, defaults to "public-subnet"

# Set OpenStack security config
SSH_KEY_NAME="vagrant" # Name of the nova keypair that will be created
SSH_KEY_PATH="#{STACK_HOME}/.ssh/id_rsa" # Private key location of the key generated for the nova keypair
SECURITY_GROUP_NAME="default" # Name of the security group to add rules to
SECURITY_GROUP_RULES="21 22 80 443" # List of ports to open up in the default security group

# Set Openstack load balancer config
LBPOOL_NAME="lbpool1" # Name your load balancer pool
LBPOOL_PORT="80" # Load balancer port
LBPOOL_PROTOCOL="HTTP" # Load balancer port
PRIVATE_NETWORK_VIP="#{PRIVATE_NETWORK}.100" # Defaults to .100 on the private network
PRIVATE_NETWORK_VIP_NAME="vip-#{PRIVATE_NETWORK_VIP}" # Defaults to "vip-" + "vip ip address"
PUBLIC_NETWORK_VIP="#{PUBLIC_NETWORK}.100" # Defaults to .100 on the private network

# VirtualBox config
VB_HOSTNAME="#{OS_HOSTNAME}" # Hostname label within VirtualBox, defaults to matching the OS_HOSTNAME
CPU="1" # Number of virtual CPUs, 1 seems to run faster than 2 as VirtualBox is a hypervisor that runs in userland, i.e. poor virtual SMP
RAM="4096" # System memory
VT_X="false" # Intel / AMD VT acceleration, inconsistent performance when testing with this build
APIC_IO="false" # Network IO acceleration, inconsistent performance when testing with this build

##################################################################################
#    DO NOT MAKE ANY CHANGES BELOW THIS LINE UNLESS YOU UNDERSTAND THE IMPACT    #
##################################################################################

Vagrant.configure("2") do |config|

  # Select distribution and build for the box
  if "#{VB_IMAGE_SOURCE}"=="HASHI"
    config.vm.box="#{VB_IMAGE_NAME}"
  elsif	"#{VB_IMAGE_SOURCE}"=="URL"
    config.vm.url="#{VB_IMAGE_URL}"
  end

  if "#{HTTP_PROXY_ENABLE}"=="true"
    if Vagrant.has_plugin?("vagrant-proxyconf")
      config.proxy.http="#{HTTP_PROXY_HOST}:#{HTTP_PROXY_PORT}/"
      config.proxy.no_proxy="localhost,127.0.0.1,192.168.0.0/16,10.0.0.0/8"
    end
  end

  if "#{HTTPS_PROXY_ENABLE}"=="true"
    if Vagrant.has_plugin?("vagrant-proxyconf")
      config.proxy.https="#{HTTPS_PROXY_HOST}:#{HTTPS_PROXY_PORT}/"
      config.proxy.no_proxy="localhost,127.0.0.1,192.168.0.0/16,10.0.0.0/8"
    end
  end

  # Speed up https downloads
  config.vm.box_download_insecure="true"

  # set the hostname, otherwise qrouter will be lost upon reload
  config.vm.hostname="#{OS_HOSTNAME}"

  # eth1, this will be the management endpoint
  config.vm.network :private_network, ip: "#{HOST_IP}", netmask: "#{DEFAULT_MASK}"

  # eth2, this will be the "public" VM network
  config.vm.network :private_network, ip: "#{PUBLIC_NETWORK}.2", netmask: "#{DEFAULT_MASK}", auto_config: false

  # virtual-box specific settings
  config.vm.provider :virtualbox do |vb|

    # Lable the virtual machine
    vb.name="#{VB_HOSTNAME}"

    # Enable the Virtual Box GUI on boot, i.e. not "headless"
    vb.gui=true

    # Set CPU and memoru size
    vb.customize ["modifyvm", :id, "--cpus", "#{CPU}"]
    vb.customize ["modifyvm", :id, "--memory", "#{RAM}"]

    # Enable promiscuous mode on eth2 for floating IPs to be accessible
    if "#{NIC3_PROMISCUOUS}" == "true"
      vb.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
    end

    # Suppress tty messages
    config.vm.provision "fix-no-tty", type: "shell" do |s|
      s.privileged="false"
      s.inline="sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
    end

  end

  # Begin in-line script
  config.vm.provision "shell", inline: <<-POST

if [ "#{HTTPS_PROXY_ENABLE}" == "true" ]; then

# Experiimenting with local proxy - Install root certificate
echo "Importing SSL Certificate..."
cat << CRT > #{SSL_CRT}
-----BEGIN CERTIFICATE-----
MIICnjCCAgegAwIBAgIJANebwMY/UnDeMA0GCSqGSIb3DQEBBQUAMD8xCzAJBgNV
BAYTAlVTMRAwDgYDVQQIEwdHZW9yZ2lhMRAwDgYDVQQHEwdBdGxhbnRhMQwwCgYD
VQQKEwNqdGcwHhcNMTUwNTIwMTQ0MjI4WhcNMjUwNTE3MTQ0MjI4WjA/MQswCQYD
VQQGEwJVUzEQMA4GA1UECBMHR2VvcmdpYTEQMA4GA1UEBxMHQXRsYW50YTEMMAoG
A1UEChMDanRnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC6pvVrnbkIMd+W
C5wLCpRgodlclsM1D4VoE5SLZSnPTEBkHFC4w2bYzID+JiZTgIV6IA3LTVobk2tG
FCs/MgaaopJ01Wj46XuNubzLXbV9vZ9ND37E5rP0PMlR+ndbkIavE4WvhfY+J1h+
C9h3QG2HDdWBA+IV2SDJqgg+FXJ6aQIDAQABo4GhMIGeMB0GA1UdDgQWBBTSmfIL
+VoUvKp45fWv0uuRuyXtdDBvBgNVHSMEaDBmgBTSmfIL+VoUvKp45fWv0uuRuyXt
dKFDpEEwPzELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0dlb3JnaWExEDAOBgNVBAcT
B0F0bGFudGExDDAKBgNVBAoTA2p0Z4IJANebwMY/UnDeMAwGA1UdEwQFMAMBAf8w
DQYJKoZIhvcNAQEFBQADgYEAWAVHVszajY4k5XS3JkzqGLWZvkNDjEv3LapqoBkZ
ee8Vukdmbo2bJ9b2MLE0zr3JIw3zTOrPHLeTcQFKZ25bQlpybZhC/yOnYsvIyN8Y
FyNqBH4XJU/Ad6tFYcCfOsTp9Bes7mdHo09HBuzoM/90aDYgOP6ipVzbEup3xptI
wAY=
-----END CERTIFICATE-----
CRT
cat #{SSL_CRT}

echo "Importing SSL Key..."
cat << KEY > #{SSL_KEY}
-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQC6pvVrnbkIMd+WC5wLCpRgodlclsM1D4VoE5SLZSnPTEBkHFC4
w2bYzID+JiZTgIV6IA3LTVobk2tGFCs/MgaaopJ01Wj46XuNubzLXbV9vZ9ND37E
5rP0PMlR+ndbkIavE4WvhfY+J1h+C9h3QG2HDdWBA+IV2SDJqgg+FXJ6aQIDAQAB
AoGBAJy0e6ukOaqlpJ+mk5W5hiUy/Ph9Itqzcz+T4My/XEDMNetW0naspvYxi8LU
aK0GZAnKS4p6IMKyHAgz+rMN3vgXtghP6xkGaFSnDqLA/JzBpia7NLXmirOngH8T
kOF3T3EKrzWOu3O2VyG2RVCYEvRmXnetrrgn5HZMDOFhmzQZAkEA8jcL59H9eb5q
FQwxBX816/dHCnwwjDuuYs6IR/2Qf1BUZpGFKo5wsm1KbVhtihTm4XUVyfGVzmI8
mIZM7GcTLwJBAMVGY5GEEbwElxkOip7JcjaIGFODRIHr+ZMNrNKDq7UOmZty/xsg
6+ekBk4FxUryGzGHHEA/I/2L5EkEl5DjxecCQFGMiPye7bl8i5jUhviz0MLGeWul
Tm8YdOkdYjLiwzCqKhBydCRU2sqoE0PnXtH7oZRM6G4aYXagCojLxsBdH88CQDqb
dM0wXUxsWK9bAJe35TSKLh/xaZLnlhe4AlXwRDzf/4aNHXjjyPHiavUXBcwELUwD
hcMYfwq+Wq3OrXCgGpUCQQCHF6frmjS2aqC6zRoUnviZA5dHAbc0u/0Ws0c6ewiH
IrvIVf5kAbkU/oEyeoKWWLfsbEt9CYa2C5im7rIcVNnM
-----END RSA PRIVATE KEY-----
KEY
cat #{SSL_KEY}

echo "Creating SSL PEM..."
cp #{SSL_KEY} #{SSL_PEM}
cat #{SSL_CRT} >> #{SSL_PEM}
chmod +rx #{SSL_KEY} #{SSL_CRT} #{SSL_PEM}
echo "#{SSL_PEM} output..."
cat #{SSL_PEM}

# Install certificate
cp #{SSL_CRT} /usr/local/share/ca-certificates
apt-get -y install ca-certificates
update-ca-certificates

# Tell apt to ignore package signing and to use proxy
# echo "Acquire::http::Proxy #{HTTP_PROXY_HOST}:#{HTTP_PROXY_PORT}/;" >> /etc/apt/apt.conf.d/01proxy
# echo "Acquire::https::Proxy #{HTTPS_PROXY_HOST}:#{HTTPS_PROXY_PORT}/;" >> /etc/apt/apt.conf.d/01proxy
echo "APT::Get::AllowUnauthenticated "true";" >> /etc/apt/apt.conf.d/01proxy

# Tell curl to ignore self-signed SSL
alias curl='curl --insecure'
echo insecure >> ~/.curlrc
echo insecure >> /home/vagrant/.curlrc

# Install some dependencies and tools
apt-get update
apt-get -y install git nmap traceroute

# Set git to use https:// instead of git://
git config --global http.sslCAInfo #{SSL_PEM}
git config --global http.proxy #{HTTP_PROXY_HOST}:#{HTTP_PROXY_PORT}/
git config --global https.pproxy #{HTTP_PROXY_HOST}:#{HTTP_PROXY_PORT}/
git config --global url.https://.insteadOf git://
git config --global http.sslVerify false

# Set pip and python to use certificate
alias pip='sudo -E pip --cert #{SSL_PEM}'
python -c "import requests; resp=requests.get('https://github.com', verify=False)"
sed -i -e 's/, InsecurePlatformWarning//g' /usr/local/lib/python2.7/dist-packages/pip/_vendor/requests/packages/urllib3/util/ssl_.py

else
echo "HTTPS proxy disabled..."
sleep 10
fi

# Install some dependencies and tools
apt-get update
apt-get -y install git nmap traceroute

# Clone the devstack repo
git clone https://github.com/openstack-dev/devstack.git #{STACK_HOME}/devstack

# Clone the heat-templates repo
git clone https://github.com/openstack/heat-templates.git #{STACK_HOME}/heat-templates

# Clone the autoscale repo
git clone https://github.com/grimmtheory/autoscale.git #{STACK_HOME}/autoscale

# Clone the vagrant-devstack repo
git clone https://github.com/grimmtheory/vagrant-devstack.git #{STACK_HOME}/vagrant-devstack

######################################################################################
#    PRE-DEVSTACK PREP WORK INSTALL COMPLETE, BEGINNING DEVSTACK CONFIG AND SETUP    #
######################################################################################

# Configure devstack
cd #{STACK_HOME}/devstack
cat << CONF > #{STACK_HOME}/devstack/local.conf
[[local|localrc]]
HOST_IP=#{HOST_IP}
DEVSTACK_BRANCH=#{DEVSTACK_BRANCH}
DEVSTACK_PASSWORD=#{DEVSTACK_PASSWORD}

# Extra config options
# EXTRA_OPTS=(metadata_host=#{HOST_IP})
# Q_DHCP_EXTRA_DEFAULT_OPTS=(enable_metadata_network=True enable_isolated_metadata=True)
# Disable ipv6
# IP_VERSION=4

# Set branch for services
KEYSTONE_BRANCH=#{DEVSTACK_BRANCH}
NOVA_BRANCH=#{DEVSTACK_BRANCH}
PUBLIC_BRANCH=#{DEVSTACK_BRANCH}
SAHARA_BRANCH=#{DEVSTACK_BRANCH}
TROVE_BRANCH=#{DEVSTACK_BRANCH}
GLANCE_BRANCH=#{DEVSTACK_BRANCH}
CINDER_BRANCH=#{DEVSTACK_BRANCH}
HEAT_BRANCH=#{DEVSTACK_BRANCH}
HORIZON_BRANCH=#{DEVSTACK_BRANCH}

# Default passwords
ADMIN_PASSWORD=#{DEVSTACK_PASSWORD}
MYSQL_PASSWORD=#{DEVSTACK_PASSWORD}
RABBIT_PASSWORD=#{DEVSTACK_PASSWORD}
SERVICE_PASSWORD=#{DEVSTACK_PASSWORD}
SERVICE_TOKEN=#{DEVSTACK_PASSWORD}

SCREEN_LOGDIR=#{LOG_DIR}
LOGFILE=#{STACK_LOG}
INSTANCES_PATH=#{INSTANCES_PATH}

# Disable unwanted services
# Disable nova network
disable_service n-net
# Disable tempest
disable_service tempest
# Disable sahara
disable_service sahara
# Disable trove
disable_service trove
disable_service tr-api
disable_service tr-mgr
disable_service tr-cond
# Disable swift
disable_service s-proxy
disable_service s-object
disable_service s-container
disable_service s-account
# Disable cinder
disable_service cinder
disable_service c-api
disable_service c-vol
disable_service c-sch
disable_service c-bak

# Enable Cinder services
# enable_service cinder
# enable_service c-api
# enable_service c-vol
# enable_service c-sch
# enable_service c-bak

# Configure Cinder services
# VOLUME_GROUP="stack-volumes"
# VOLUME_NAME_PREFIX="volume-"
# VOLUME_BACKING_FILE_SIZE=250M

# Enable Database Backend MySQL
enable_service mysql

# Enable RPC Backend RabbitMQ
enable_service rabbit

# Enable Keystone - OpenStack Identity Service
enable_service key

# Enable Horizon - OpenStack Dashboard Service
enable_service horizon

# Enable Glance - OpenStack Image Registry service
enable_service g-api
enable_service g-reg

# Enable Neutron
enable_service q-svc
enable_service q-agt
enable_service q-dhcp
enable_service q-l3
enable_service q-meta
enable_service q-lbaas
enable_service neutron

# Configure Neutron
FLAT_INTERFACE=#{FLAT_NEUTRON_INTERFACE}
PUBLIC_INTERFACE=#{PUBLIC_NEUTRON_INTERFACE}
FIXED_RANGE=#{PRIVATE_NETWORK}.0/24
FLOATING_RANGE=#{PUBLIC_NETWORK}.0/24
PUBLIC_NETWORK_GATEWAY=#{PUBLIC_NETWORK}.2
Q_FLOATING_ALLOCATION_POOL=start=#{PUBLIC_NETWORK}.3,end=#{PUBLIC_NETWORK}.254
OVS_PHYSICAL_BRIDGE=#{OVS_EXTERNAL_BRIDGE}

# Enable Ceilometer - Metering Service (metering + alarming)
enable_service ceilometer-collector
enable_service ceilometer-acompute
enable_service ceilometer-acentral
enable_service ceilometer-anotification
enable_service ceilometer-api
enable_service ceilometer-alarm-notifier
enable_service ceilometer-alarm-evaluator

# Enable Heat - Orchestration Service
enable_service heat
enable_service h-api
enable_service h-api-cfn
enable_service h-api-cw
enable_service h-eng
CONF

# Set passwords
echo "" ; echo "Setting passwords..."
echo root:#{DEVSTACK_PASSWORD} | chpasswd
echo vagrant:#{DEVSTACK_PASSWORD} | chpasswd
grep root /etc/passwd
grep vagrant /etc/passwd

# fix permissions as the cloned repo is owned by root
echo "" ; echo "Updating permissions on #{STACK_HOME}"
chown -R vagrant:vagrant #{STACK_HOME}

# Add credentials to Vagrant's bash profile
echo "" ; echo "Adding openrc credentials to #{STACK_HOME}/.bash_profile"
echo "source #{STACK_HOME}/devstack/openrc admin demo" >> #{STACK_HOME}/.bash_profile
cat #{STACK_HOME}/.bash_profile

# fix routing so that VMs can reach out to the internets
echo "" ; echo "Fixing routing so that #{PRIVATE_NETWORK}.0/24 can see #{PUBLIC_NETWORK}.0/24"
cat << SYSCTL > /etc/sysctl.d/60-devstack.conf
net.ipv4.conf.eth0.proxy_arp=1
net.ipv4.ip_forward=1
SYSCTL
cat /etc/sysctl.d/60-devstack.conf

echo "" ; echo "Applying new routing, interface rules, etc."
sysctl --system
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE

# bring up #{FLAT_NEUTRON_INTERFACE}
echo "" ; echo "Bringing up #{FLAT_NEUTRON_INTERFACE}..."
ip link set dev #{FLAT_NEUTRON_INTERFACE} up
echo "" ; echo "Bringing up #{FLAT_NEUTRON_INTERFACE} results:"
echo "" ; ifconfig #{FLAT_NEUTRON_INTERFACE}

ifconfig

# setup devstack
echo "" ; echo "Setting up DevStack..."
cd #{STACK_HOME}/devstack
sudo -u vagrant env HOME=#{STACK_HOME} ./stack.sh

# fix network setup to make VMs pingable from inside and outside devstack
echo "" ; echo "Fix network setup to make VMs pingable from inside and outside devstack"
ovs-vsctl add-port #{OVS_EXTERNAL_BRIDGE} #{FLAT_NEUTRON_INTERFACE}

# Setup the #{FLAT_NEUTRON_INTERFACE} interfaces file
cat << #{FLAT_NEUTRON_INTERFACE} > /etc/network/interfaces.d/#{FLAT_NEUTRON_INTERFACE}.cfg
auto #{FLAT_NEUTRON_INTERFACE}
iface #{FLAT_NEUTRON_INTERFACE} inet manual
#{FLAT_NEUTRON_INTERFACE}
cat /etc/network/interfaces.d/#{FLAT_NEUTRON_INTERFACE}.cfg

# Setup the #{OVS_EXTERNAL_BRIDGE} interfaces file
cat << #{OVS_EXTERNAL_BRIDGE} > /etc/network/interfaces.d/#{OVS_EXTERNAL_BRIDGE}.cfg
auto #{OVS_EXTERNAL_BRIDGE}
iface #{OVS_EXTERNAL_BRIDGE} inet static
address #{PUBLIC_NETWORK}.2
netmask #{DEFAULT_MASK}
up ip route add #{PRIVATE_NETWORK}.0/24 via #{PUBLIC_NETWORK}.3 dev #{OVS_EXTERNAL_BRIDGE}
#{OVS_EXTERNAL_BRIDGE}
cat /etc/network/interfaces.d/#{OVS_EXTERNAL_BRIDGE}.cfg

# Begin post tasks
cd "#{STACK_HOME}"

# Report stack.sh run time - Stack.sh used to report run time, since they've removed that add it back
devstart=`head -n 1 "#{STACK_LOG}" | awk '{ print $2 }' | cut -d . -f 1`
devstop=`tail -n 9 "#{STACK_LOG}" | grep -m1 2015 | awk '{ print $2 }' | cut -d . -f 1`
startdate=$(date -u -d "$devstart" +"%s")
enddate=$(date -u -d "$devstop" +"%s")
runtime=`date -u -d "0 $enddate sec - $startdate sec" +"%H:%M:%S"`

echo " -----------------------------"
echo " | DEVSTACK START:  $devstart |"
echo " | DEVSTACK STOP:   $devstop |"
echo " -----------------------------"
echo " | TOTAL RUN TIME:  $runtime |"
echo " -----------------------------"
echo ""

# Source credential functions to allow easy swapping between creds as needed
sourceadmin () { echo "Sourcing user admin and project admin..."; source "#{STACK_HOME}/devstack/openrc" admin admin; }
sourcedemo () { echo "Sourcing user admin and project demo..."; source "#{STACK_HOME}/devstack/openrc" admin demo; }
sleep15 () { echo ""; echo -n "Sleeping 15 seconds: "; count=1; while [ $count -le 15 ]; do echo -n "$count "; sleep 1; let count=count+1; done; echo -e ""; }
sleep30 () { echo ""; echo -n "Sleeping 30 seconds: "; count=1; while [ $count -le 30 ]; do echo -n "$count "; sleep 1; let count=count+1; done; echo -e ""; }

sourceadmin
# Setup local variables, note, cannot be created until after DevStack is running
PUBLIC_NETWORK_ID=`neutron net-list | grep -v ipv6 | grep public | awk '{ print $2 }'` # Public network guid
PUBLIC_SUBNET_ID=`neutron subnet-list | grep -v ipv6 | grep public | awk '{ print $2 }'` # Public subnet guid
PRIVATE_NETWORK_ID=`neutron net-list | grep -v ipv6 | grep private | awk '{ print $2 }'` # Private network guid
PRIVATE_SUBNET_ID=`neutron subnet-list | grep -v ipv6 | grep private | awk '{ print $2 }'` # Private subnet guid
echo "PUBLIC NETWORK ID  = $PUBLIC_NETWORK_ID"
echo "PUBLIC SUBNET ID   = $PUBLIC_SUBNET_ID"
echo "PRIVATE NETWORK ID = $PRIVATE_NETWORK_ID"
echo "PRIVATE SUBNET ID  = $PRIVATE_SUBNET_ID"

# generate a keypair and make it available via share
echo "Generating keypair for key name: #{SSH_KEY_NAME}"
ssh-keygen -t rsa -N "" -f "#{SSH_KEY_PATH}"
chown -R vagrant:vagrant "#{STACK_HOME}" ; chmod 600 "#{SSH_KEY_PATH}" ; chmod 644 "#{SSH_KEY_PATH}.pub"

# add the vagrant keypair and open up security groups
echo "Adding keypair and creating security group rules..."
cd "#{STACK_HOME}/devstack"
for user in admin demo; do

  # Source OpenStack credentials and add keypair
  source openrc $user $user
  nova keypair-add --pub-key "#{SSH_KEY_PATH}.pub" "#{SSH_KEY_NAME}"

  # Allow for UDP and ICMP
  nova secgroup-add-rule default udp 1 65535 0.0.0.0/0
  nova secgroup-add-rule default icmp -1 -1 0.0.0.0/0

  # Add TCP rules
  for port in `echo '#{SECURITY_GROUP_RULES}'` ; do
    nova secgroup-add-rule "#{SECURITY_GROUP_NAME}" tcp $port $port 0.0.0.0/0
  done
done

echo "" ; echo "Security group rules and keypair creation output:"
echo "" ; nova secgroup-list-rules default
echo "" ; nova keypair-list

# use the google dns server as a sane default
echo "Adding DNS servers to subnets..."
sourceadmin
neutron subnet-update "#{PUBLIC_SUBNET_NAME}" --dns_nameservers list=true "#{DNS}"
neutron subnet-update "#{PRIVATE_SUBNET_NAME}" --dns_nameservers list=true "#{DNS}"
echo "" ; echo "Neutron subnet configuration output:"
echo "" ; neutron subnet-list ; neutron subnet-show "#{PUBLIC_SUBNET_NAME}" ; neutron subnet-show "#{PUBLIC_SUBNET_NAME}"
sleep15

# Setup web instances
echo "Setting up web instances..."
sourcedemo

# Create a custom flavor for small cirros instances (id 6, 128 mb ram, 1 cpu, 1 gb disk)
echo "" ; echo "Creating custom flavor '#{DEFAULT_NOVA_FLAVOR_NAME}' for web instances..."
echo "" ; nova flavor-create --is-public true "#{DEFAULT_NOVA_FLAVOR_NAME}" 6 64 1 1
echo "" ; echo "Custom flavor creation output:"
echo "" ; nova flavor-list ; nova flavor-show "#{DEFAULT_NOVA_FLAVOR_NAME}"
sleep15

# Spawn instances
echo "" ; echo "Spawning instances..."
num=1

while [ $num -le 3 ] ; do

  echo "Creating instance node$num..."
  echo "RUNNING COMMAND ## nova boot --image #{DEFAULT_NOVA_IMAGE} --flavor #{DEFAULT_NOVA_FLAVOR_ID} --nic net-id=$PRIVATE_NETWORK_ID,v4-fixed-ip=#{PRIVATE_NETWORK}.10$num --key-name #{SSH_KEY_NAME} node$num"
  nova boot --image #{DEFAULT_NOVA_IMAGE} --flavor #{DEFAULT_NOVA_FLAVOR_ID} --nic net-id=$PRIVATE_NETWORK_ID,v4-fixed-ip=#{PRIVATE_NETWORK}.10$num --key-name #{SSH_KEY_NAME} node$num
  sleep15
  echo "" ; echo "instance node$num created:"
  echo "" ; nova show node$num

  num=$(( $num + 1 ))

done

echo "" ; echo "All instances created."
echo "" ; nova list

# Create load balancer pool
echo "Creating load balancer pool..."
sourcedemo
echo "RUNNING COMMAND ## neutron lb-pool-create --lb-method ROUND_ROBIN --name #{LBPOOL_NAME} --protocol #{LBPOOL_PROTOCOL} --subnet-id $PRIVATE_SUBNET_ID"
neutron lb-pool-create --lb-method ROUND_ROBIN --name #{LBPOOL_NAME} --protocol #{LBPOOL_PROTOCOL} --subnet-id $PRIVATE_SUBNET_ID
echo "" ; echo "Load balancer pool creation complete:"
sleep15

neutron lb-pool-list

# Add load balancer members
echo "Adding load balancer pool members..."
sourcedemo
num=1
while [ $num -le 3 ]; do

  echo "Adding member node$num to load balancer pool..."
  echo "RUNNING COMMAND ## neutron lb-member-create --address #{PRIVATE_NETWORK}.10$num --protocol-port #{LBPOOL_PORT} #{LBPOOL_NAME}"

  neutron lb-member-create --address #{PRIVATE_NETWORK}.10$num --protocol-port #{LBPOOL_PORT} #{LBPOOL_NAME}

  echo "" ; echo "Load balancer pool member $num added."
  sleep15
  neutron lb-member-list

  num=$(( $num + 1 ))

done

echo "" ; echo "All load balancer members added to #{LBPOOL_NAME}."
neutron lb-member-list
sleep15

# Setup load balancer health monitor
sourcedemo

echo "Creating load balancer health monitor..."
echo "RUNNING COMMAND ## neutron lb-healthmonitor-create --delay 3 --type "#{LBPOOL_PROTOCOL}" --max-retries 3 --timeout 3"
neutron lb-healthmonitor-create --delay 3 --type "#{LBPOOL_PROTOCOL}" --max-retries 3 --timeout 3

echo "Getting health monitor id..."
echo "RUNNING COMMAND ## healthmonitorid=`neutron lb-healthmonitor-list | grep "#{LBPOOL_PROTOCOL}" | awk '{ print $2 }'`"
healthmonitorid=`neutron lb-healthmonitor-list | grep "#{LBPOOL_PROTOCOL}" | awk '{ print $2 }'`

echo "Associating health monitor..."
echo "RUNNING COMMAND ## neutron lb-healthmonitor-associate $healthmonitorid" "#{LBPOOL_NAME}""
neutron lb-healthmonitor-associate $healthmonitorid" "#{LBPOOL_NAME}"

echo "" ; echo "Health monitor added to "#{LBPOOL_NAME}"."
sleep15
neutron lb-healthmonitor-list

# Create load balancer vip
echo "Creating load balancer vip..."
sourcedemo

echo "RUNNING COMMAND ## neutron lb-vip-create --name #{PRIVATE_NETWORK_VIP_NAME} --protocol-port #{LBPOOL_PORT} --protocol #{LBPOOL_PROTOCOL} --subnet-id $PRIVATE_SUBNET_ID --address #{PRIVATE_NETWORK_VIP} #{LBPOOL_NAME}"
neutron lb-vip-create --name #{PRIVATE_NETWORK_VIP_NAME} --protocol-port #{LBPOOL_PORT} --protocol #{LBPOOL_PROTOCOL} --subnet-id $PRIVATE_SUBNET_ID --address #{PRIVATE_NETWORK_VIP} #{LBPOOL_NAME}

echo "" ; echo "Load balancer vip creation complete:"
echo "" ; neutron lb-vip-list
sleep15

# Add load balancer floating ip
echo "Adding floating ip to load balancer..."
sourcedemo

echo "RUNNING COMMAND ## neutron floatingip-create --port-id $portid --fixed-ip-address #{PRIVATE_NETWORK_VIP} --floating-ip-address #{PUBLIC_NETWORK_VIP} #{PUBLIC_NETWORK_NAME}"
portid=`neutron port-list | grep #{PRIVATE_NETWORK_VIP} | awk '{ print $2 }'`
neutron floatingip-create --port-id $portid --fixed-ip-address #{PRIVATE_NETWORK_VIP} --floating-ip-address #{PUBLIC_NETWORK_VIP} #{PUBLIC_NETWORK_NAME}

sleep15

neutron floatingip-list

# Turn on an http listener for each host
echo "Creating an HTTP listener on each node..."

for ip in #{PRIVATE_NETWORK}.101 #{PRIVATE_NETWORK}.102 #{PRIVATE_NETWORK}.103; do

  echo "Creating listener on $ip ..."
  ssh -i #{SSH_KEY_PATH} -o BatchMode=yes -o StrictHostKeyChecking=no cirros@$ip "while true; do echo -e 'HTTP/1.0 200 OK\r\n\r\nYou are connected to $ip' | sudo nc -l -p 80 ; done &"
  sleep15

done
echo "All listeners created."

sleep30

# Testing VIPs
echo ""
echo "Testing the HTTP listener on each node..."

# for ip in `nova list | grep node | awk '{ print $12 }' | awk -F= '{ print $2 }' | sed -e 's/,//g'`
for ip in #{PRIVATE_NETWORK}.101 #{PRIVATE_NETWORK}.102 #{PRIVATE_NETWORK}.103 ; do
  num=1
  while [[ num++ -le 3 ]]; do
    ipresult=`curl --connect-timeout 3 -s http://$ip | grep .`
    sleep 1
    echo "Testing HTTP access to node $ip returns: $ipresult"
    sleep 3
  done
done

echo ""
echo "Testing HTTP access to each virtual ip address..."
for vip in #{PRIVATE_NETWORK_VIP} #{PUBLIC_NETWORK_VIP} ; do
  num=1
  while [[ num++ -le 5 ]]; do
    vipresult=`curl --connect-timeout 3 -s http://$vip | grep .`
    sleep 1
    echo "Testing HTTP access to vip $vip  returns: $vipresult"
    sleep 3
  done
done

    POST

end
